// Two pointer optimal approach
// Time Complexity O(n).


class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        int n = nums.size();
        int i =0;
        int j = n-1;
        vector<int>ans(n);
        int a= n-1;
        while(j>=i){
            if(abs(nums[j])>=abs(nums[i])){
                ans[a]=(abs(nums[j]));
                j--;
                a--;
            }
            else if(abs(nums[j])<abs(nums[i])){
                ans[a]=(abs(nums[i]));
                i++;
                a--;
            }


        }
        for(int i =0; i<n; i++){
            ans[i]=ans[i]*ans[i];

        }
        return ans;
    }
};
